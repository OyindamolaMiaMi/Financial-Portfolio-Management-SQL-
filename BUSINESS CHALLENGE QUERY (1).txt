BUSINESS CHALLENGE
AUTHOR - OYINDAMOLA IWALEHIN 
CO-AUTHOR - HTET AUNG KYAW, TANGINA PARVEZ, HANZ TRAJANO
TEAM 3 
-- At First I tried to calculate Returns for the years but the query returned for just one ticker ‘slv’
-- RETURNS
SELECT
			security.ticker,
            security.security_name,
            security.sec_type,
            security.major_asset_class,
            security.minor_asset_class,
            ROUND(price1.returns,4) AS 12M_returns,
            ROUND(price2.returns,4) AS 18M_returns,
            ROUND(price3.returns,4) AS 24M_returns
FROM		security_masterlist AS security
LEFT JOIN	(
			SELECT	*,
					(price.value-price.lagged_price)/price.lagged_price AS returns
			FROM	(
					SELECT *, LAG(value, 252)OVER(
										PARTITION BY ticker
										ORDER BY date
										) AS lagged_price
					FROM 	pricing_daily_new
					WHERE	price_type='Adjusted') AS price
            )	AS price1
	ON		security.ticker = price1.ticker
LEFT JOIN	(
			SELECT	price.ticker,
					price.date,
					(price.value-price.lagged_price)/price.lagged_price AS returns
			FROM	(
					SELECT *, LAG(value, 378)OVER(
										PARTITION BY ticker
										ORDER BY date
										) AS lagged_price
					FROM 	pricing_daily_new
					WHERE	price_type='Adjusted') AS price
            )	AS price2
	ON		price1.ticker = price2.ticker
LEFT JOIN	(
			SELECT	price.ticker,
					price.date,
					(price.value-price.lagged_price)/price.lagged_price AS returns
			FROM	(
					SELECT *, LAG(value, 504)OVER(
										PARTITION BY ticker
										ORDER BY date
										) AS lagged_price
					FROM 	pricing_daily_new
					WHERE	price_type='Adjusted') AS price
            )	AS price3
	ON		price2.ticker = price3.ticker
WHERE		price1.date = '2022-09-09'
	AND		price2.date = '2022-09-09'
    AND		price3.date = '2022-09-09'
GROUP BY	security.ticker
;


--/* We created a stored procedure for the randomly selected customers using their customer_id
--/* -- create customer information
		WITH customer_information_table AS (
        SELECT  cs.customer_id, 
				full_name, 
                opt38_desc, 
                account_id, 
                acct_open_date,
                CASE WHEN acct_open_status THEN 'Active'
					 ELSE 'Inactive' END,
				email,
                customer_location
		FROM customer_details AS cs
        LEFT JOIN account_dim AS ad
        ON cs.customer_id = ad.client_id
        WHERE cs.customer_id = 25),
	-- create total number of investment for the customer
        total_investment_amount_table AS (
        SELECT client_id AS customer_id,
			   SUM(value * quantity) AS total_investment
        FROM holdings_current
        LEFT JOIN account_dim
        USING(account_id)
        WHERE client_id = 25),
	-- create customer ticker list
		customer_ticker_list AS (
		SELECT  ad.client_id AS customer_id, 
				hc.ticker AS ticker,
                AVG(value) AS value,
                SUM(quantity) AS quantity,
                SUM(value * quantity) AS amount,
                SUM(value * quantity) / total_investment AS weight,
                sec_type,
                CASE WHEN major_asset_class = 'fixed_income' THEN 'fixed income'
					 ELSE major_asset_class END AS major_asset_class,
                minor_asset_class
		 FROM account_dim AS ad
		 LEFT JOIN holdings_current hc
		 USING(account_id)
         LEFT JOIN security_masterlist AS sm
         USING(ticker)
         LEFT JOIN total_investment_amount_table AS tiam
         ON tiam.customer_id = ad.client_id
		 WHERE ad.client_id = 25
		 GROUP BY  ad.client_id, hc.ticker, sec_type, major_asset_class, minor_asset_class),
	-- create return of each ticker table
		return_of_each_ticker_table AS (
		SELECT	returns.ticker AS ticker,
				AVG(returns.returns) AS mean,
				STDDEV(returns.returns) * SQRT(250) AS standard_dev,
				AVG(returns.returns)/(STDDEV(returns.returns)* SQRT(250)) AS risk_adjusted_return
		FROM (SELECT a.date,
					 a.ticker,
					 (a.value-a.lagged_price)/a.lagged_price AS returns
			  FROM ( SELECT *, LAG(value, 1)OVER(
					 PARTITION BY ticker ORDER BY date) AS lagged_price
					 FROM 	pricing_daily_new
					 WHERE	price_type='Adjusted') AS a
		INNER JOIN customer_ticker_list
        USING(ticker)
		WHERE  date >= CONCAT(2022-1,'-09-09')) AS returns
		GROUP BY returns.ticker),
	-- combine customer ticker table and return of each ticker table
		customer_ticker_return_detail_table AS (
        SELECT  customer_id, 
				ctl.ticker, 
                ctl.value, 
                ctl.quantity, 
                ctl.weight, 
                sec_type,
                major_asset_class,
                minor_asset_class,
                mean,
                standard_dev,
                risk_adjusted_return
			FROM customer_ticker_list AS ctl
            LEFT JOIN return_of_each_ticker_table
            USING (ticker)  ),
    -- investment per each ticker per customer
		group_by_ticker AS (
        SELECT customer_id,
                CONCAT('$ ',FORMAT(AVG(value),2)),
                SUM(quantity),
                CONCAT(FORMAT(SUM(weight * 100),2),'%'),
                sec_type,
                major_asset_class,
                FORMAT(AVG(mean),5),
                FORMAT(AVG(standard_dev),5),
                FORMAT(AVG(risk_adjusted_return),5)
		FROM customer_ticker_return_detail_table
        GROUP BY sec_type, major_asset_class
        ORDER BY SUM(weight * 100) DESC
        ),
        group_by_customer AS (
                SELECT customer_id,
                CONCAT('$ ',FORMAT(AVG(value),2)),
                SUM(quantity),
                CONCAT(FORMAT(SUM(weight * 100),2),'%'),
                sec_type,
                major_asset_class,
                FORMAT(AVG(mean),5),
                FORMAT(AVG(standard_dev),5),
                FORMAT(AVG(risk_adjusted_return),5)
		FROM customer_ticker_return_detail_table
        GROUP BY customer_id
        ORDER BY SUM(quantity) DESC
        ),
	-- create table for risk adj. return for all tickers
		return_of_all_tickers_table AS (
		SELECT	returns.ticker AS ticker,
				AVG(returns.returns) AS mean,
				STDDEV(returns.returns) * SQRT(250) AS standard_dev,
				AVG(returns.returns)/(STDDEV(returns.returns)* SQRT(250)) AS risk_adjusted_return
		FROM (SELECT a.date,
					 a.ticker,
					 (a.value-a.lagged_price)/a.lagged_price AS returns
			  FROM ( SELECT *, LAG(value, 1)OVER(
					 PARTITION BY ticker ORDER BY date) AS lagged_price
					 FROM 	pricing_daily_new
					 WHERE	price_type='Adjusted') AS a
		WHERE  date >= CONCAT(2022-1,'-09-09')) AS returns
		GROUP BY returns.ticker),
	-- compare 2 tickers per each class for a total of 4 tickers
	-- ticker 1
		ticker1_table AS (
        SELECT  ticker,
				FORMAT(mean,5),
                FORMAT(standard_dev,5),
                FORMAT(risk_adjusted_return,5)
        FROM return_of_all_tickers_table
        WHERE ticker = 'TSM'),
	-- ticker 2
		ticker2_table AS (
        SELECT ticker,
				FORMAT(mean,5),
                FORMAT(standard_dev,5),
                FORMAT(risk_adjusted_return,5)
        FROM return_of_all_tickers_table
        WHERE ticker = 'INTC'),		
	-- ticker 3
        ticker3_table AS (
        SELECT ticker,
				FORMAT(mean,5),
                FORMAT(standard_dev,5),
                FORMAT(risk_adjusted_return,5)
        FROM return_of_all_tickers_table
        WHERE ticker = 'SLV'),
	-- ticker 4
		ticker4_table AS (
        SELECT ticker,
				FORMAT(mean,5),
                FORMAT(standard_dev,5),
                FORMAT(risk_adjusted_return,5)
        FROM return_of_all_tickers_table
        WHERE ticker = 'AAAU'),
	-- correlation test for four tickers
		price1 AS (
		SELECT 	ticker AS ticker1, date, row_names, value AS value1
		FROM pricing_daily_new as pdn
		WHERE pdn.ticker = varTicker
		AND date >= CONCAT(2022-1,'-09-09')
		AND price_type = 'Adjusted'),
	-- create temp table for price 2
		price2 AS (
		SELECT 	date, ticker AS ticker2, value AS value2
		FROM pricing_daily_new as pdn
		WHERE pdn.ticker = 'INTC'
		AND date >= CONCAT(2022-1,'-09-09')
		AND price_type = 'Adjusted'),
	-- create temp table for lag price 1
		lag_price_table1 AS (
		SELECT date, row_names + 1 AS row_names, value AS lag_price1
		FROM pricing_daily_new
		WHERE ticker = varTicker
		AND date >= CONCAT(2022-1,'-09-08')
		AND price_type = 'Adjusted'),
	-- create temp table for lag price 2
		lag_price_table2 AS (
		SELECT date, row_names + 1 AS row_names, value AS lag_price2
		FROM pricing_daily_new
		WHERE ticker = 'INTC'
		AND date >= CONCAT(2022-1,'-09-08')
		AND price_type = 'Adjusted'),
	-- create temp table for return calculation
		return_table AS (
		SELECT p1.ticker1,
			   p2.ticker2,
			   value1, 
			   value2, 
			   lag_price1, 
			   lag_price2, 
			   (value1 - lag_price1)/lag_price1 AS return1, 
			   (value2 - lag_price2)/lag_price1 AS return2
		FROM price1 AS p1
		LEFT JOIN price2 AS p2
		ON p1.date = p2.date
		LEFT JOIN lag_price_table1 AS lp1
		ON lp1.row_names = p1.row_names
		LEFT JOIN lag_price_table2 AS lp2
		ON lp2.date = lp1.date),
	-- calculate mean, standard deviation
		mean AS (
		SELECT  ticker1, 
				ticker2, 
				FORMAT(AVG(value1),5) AS avg_p1, 
				FORMAT(AVG(value2),5) AS avg_p2, 
				FORMAT(AVG(return1),5) AS avg_r1, 
				FORMAT(AVG(return2),5) AS avg_r2,
				FORMAT(STDDEV(value1),5) AS std_p1,
				FORMAT(STDDEV(value2),5) AS std_p2,
				FORMAT(STDDEV(return1),5) AS std_r1,
				FORMAT(STDDEV(return2),5) AS std_r2
		FROM return_table
		GROUP BY ticker1, ticker2),
	-- calculate covariance
		covariance AS (
		SELECT FORMAT(AVG((value1 - avg_p1) * (value2 - avg_p2)),5) AS cov_price,
			   FORMAT(AVG((return1 - avg_r1) * (return2 - avg_r2)),5) AS cov_return
		FROM return_table AS rt
		LEFT JOIN mean AS m
		ON rt.ticker1 = m.ticker1),
	-- calculate correlation
		correlation AS (
		SELECT 	*,
				FORMAT(cov_price / (std_p1 * std_p2),5) AS corr_price,
				FORMAT(cov_return / (std_r1 * std_r2),5) AS corr_return
		FROM mean
		CROSS JOIN covariance
		)
	
        
		-- create display form
			SELECT 'Customer Portfolio','','','','','','','','','','','','',''
			UNION
			SELECT '','','','','','','','','','','','','',''
            UNION
			SELECT 'Customer Information','','','','','','','','','','','','',''
            UNION
			SELECT 'Customer ID','Full Name','Type','Account ID','Open Date','Status','Email','Location','','','','','',''
            UNION            
            SELECT *,'','','','','',''
            FROM customer_information_table
			UNION
			SELECT ' ','','','','','','',' ','','','','','',''
            UNION
			SELECT 'Customer Invesment Summary','','','','','','','','','','','','',''
            UNION
			SELECT 'Customer ID','AVG. Price','Total Quantity','Weight','Sec. Type','Major Class','AVG. Mean','AVG. Std.','AVG. Risk Adj. Return','','','','',''
            UNION
            SELECT *,'','','','',' '
            FROM group_by_customer
			UNION
			SELECT ' ','','','','','','','','',' ','','','',''
            UNION
			SELECT 'Customer Major Classes','','','','','','','','','','','','',''
            UNION
			SELECT 'Customer ID','AVG. Price','Total Quantity','Weight','Sec. Type','Major Class','AVG. Mean','AVG. Std.','AVG. Risk Adj. Return','','','','',''
            UNION
            SELECT *,'','','','',''
            FROM group_by_ticker
			UNION
			SELECT '',' ',' ','','','  ',' ','','','','','','',''
            UNION
			SELECT 'Ticker Recommendations 1','','','','','','','','','','','','',''
            UNION
			SELECT 'Ticker','Mean','Std. Dev','Risk Adj. Return','','','','','','','','','',''
            UNION
            SELECT *,'','','','','','','','','',''
            FROM ticker1_table
            UNION
			SELECT *,'','','','','','','','','',''
            FROM ticker2_table
            UNION
            SELECT 'Ticker Recommendations 2','','','','','','','',' ','','','','',''
            UNION
			SELECT 'Ticker','Mean','Std. Dev','Risk Adj. Return','','','','','','','','','',''
            UNION
            SELECT *,'','','','','','','','','',''
            FROM ticker3_table
            UNION
			SELECT *,'','','','','','','','','',''
            FROM ticker4_table
            UNION
            SELECT '','','','',' ','','','','','','','','',''
            UNION
            SELECT '','','','','','','','','','','','','',''
            UNION
			SELECT 'APPENDIX','','','','','','','','','','','','',''
            UNION
			SELECT 'Customer ID','Ticker','AVG. Value','Total Quantity','Weight','Sec Type','Major Class','Minor Class','Mean','STD.','Risk Adj. Return','','',''
            UNION
			SELECT *,'','',''
            FROM customer_ticker_return_detail_table
            ;





-- */




-- Using invest Database
USE invest;



/*
1. What is the most recent 12M, 18M, 24M (months) return for each of the securities (and for the entire portfolio)? 
*/

/*
CLIENTS - 25 , 197
*/

/* 
Creating temporary dataset
and temporaily storing the data 
by joining all the tables 
and filtering them with 
account id 25 , 197
and for period of 2 years
(Customer are selected by random generation of numbers and choosing them with serial number.)

*/
WITH miami1 AS (
SELECT cd.full_name, 
       sm.major_asset_class, 
       sm.minor_asset_class, 
       pd.ticker, 
       sm.security_name, 
       hc.quantity, 
       pd.`date`, 
       pd.`value`
FROM account_dim AS ad
JOIN customer_details AS cd
ON  ad.client_id = cd.customer_id
JOIN holdings_current AS hc
ON ad.account_id = hc.account_id
JOIN security_masterlist AS sm
ON sm.ticker = hc.ticker
JOIN pricing_daily_new AS pd
ON pd.ticker = sm.ticker
WHERE hc.account_id IN ('25','197') 
AND pd.date BETWEEN '2020-09-09' AND '2022-09-09'
AND pd.price_type = 'Adjusted'
),


/*
Creating the temporary dataset 
where calculating the lagged price
 for 12 months, 18 months, 24 months respectively
*/
miami2 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       LAG(value, 250) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_12m,
       LAG(value, 378) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_18m,
       LAG(value, 504) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_24m
FROM miami1
),

/*
Calculating returns for 12 months, 18 months,24 months
*/
miami3 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       lagged_price_12m,
       lagged_price_18m,
       lagged_price_24m,
       (`value` - lagged_price_12m) / lagged_price_12m AS return_12m,
       (`value` - lagged_price_18m) / lagged_price_18m AS return_18m,
       (`value` - lagged_price_24m) / lagged_price_24m AS return_24m
FROM miami2
WHERE date = '2022-09-09'
),

/*
Making the multiple records in major assest class into one entity
and displaying the whole data
*/
miami4 AS(
SELECT miami3.full_name,miami3.ticker,
       CASE WHEN sm.major_asset_class = 'equty' THEN 'equity'
            WHEN sm.major_asset_class = 'fixed income' THEN 'fixed_income'
            WHEN sm.major_asset_class = 'fixed income corporate' THEN 'fixed_income'
            ELSE sm.major_asset_class END AS major_asset_class,
       sm.minor_asset_class,
	   miami3.security_name, 
	   AVG(miami3.return_12m) AS return_12m,
	   AVG(miami3.return_18m) AS return_18m,
       AVG(miami3.return_24m) AS return_24m
FROM miami3
JOIN security_masterlist AS sm
ON miami3.security_name = sm.security_name
WHERE return_12m IS NOT NULL
  AND return_18m IS NOT NULL
  AND return_24m IS NOT NULL
GROUP BY ticker
ORDER BY return_12m DESC , return_18m DESC, return_24m DESC
)

/*
Displaying the 12,18,24 MONTHS returns of 
customer 25 and 197

*/

SELECT full_name,
ticker,
       major_asset_class,
       minor_asset_class,
       security_name, 
        return_12m, 
        return_18m,
       return_24m
FROM miami4
;

/*
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
*/

/* 
Creating temporary dataset
and temporaily storing the data 
by joining all the tables 
and filtering them with 
account id 25,197
and for period of 2 years
(Customer are selected by random generation of numbers and choosing them with serial number.)

*/
WITH miami1 AS (
SELECT cd.full_name, 
       sm.major_asset_class, 
       sm.minor_asset_class, 
       pd.ticker, 
       sm.security_name, 
       hc.quantity, 
       pd.`date`, 
       pd.`value`
FROM account_dim AS ad
JOIN customer_details AS cd
ON  ad.client_id = cd.customer_id
JOIN holdings_current AS hc
ON ad.account_id = hc.account_id
JOIN security_masterlist AS sm
ON sm.ticker = hc.ticker
JOIN pricing_daily_new AS pd
ON pd.ticker = sm.ticker
WHERE hc.account_id IN ('25','197') 
AND pd.date BETWEEN '2020-09-09' AND '2022-09-09'
AND pd.price_type = 'Adjusted'
),


/*
Creating the temporary dataset 
where calculating the lagged price
 for 12 months, 18 months, 24 months respectively
*/
miami2 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       LAG(value, 250) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_12m,
       LAG(value, 378) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_18m,
       LAG(value, 504) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_24m
FROM miami1
),

/*
Calculating returns for 12 months, 18 months,24 months
*/
miami3 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       lagged_price_12m,
       lagged_price_18m,
       lagged_price_24m,
       (`value` - lagged_price_12m) / lagged_price_12m AS return_12m,
       (`value` - lagged_price_18m) / lagged_price_18m AS return_18m,
       (`value` - lagged_price_24m) / lagged_price_24m AS return_24m
FROM miami2
WHERE date = '2022-09-09'
),

/*
Making the multiple records in major assest class into one entity
and displaying the whole data
*/
miami4 AS(
SELECT miami3.full_name,miami3.ticker,
       CASE WHEN sm.major_asset_class = 'equty' THEN 'equity'
            WHEN sm.major_asset_class = 'fixed income' THEN 'fixed_income'
            WHEN sm.major_asset_class = 'fixed income corporate' THEN 'fixed_income'
            ELSE sm.major_asset_class END AS major_asset_class,
       sm.minor_asset_class,
	   miami3.security_name, 
	   AVG(ft3.return_12m) AS return_12m,
	   AVG(ft3.return_18m) AS return_18m,
       AVG(ft3.return_24m) AS return_24m
FROM miami3
JOIN security_masterlist AS sm
ON miami3.security_name = sm.security_name
WHERE return_12m IS NOT NULL
  AND return_18m IS NOT NULL
  AND return_24m IS NOT NULL
GROUP BY ticker
ORDER BY return_12m DESC , return_18m DESC, return_24m DESC
)

/*
Calculating the total returns for the all the clients
*/
SELECT full_name,
        SUM(return_12m), 
        SUM(return_18m),
       SUM(return_24m)
FROM miami4
Group by full_name
;


/*
===============================================================
==============================================================
*/

/* 
Creating temporary dataset
and temporaily storing the data 
by joining all the tables 
and filtering them with 
account id 25, 197
and for period of 2 years
(Customer are selected by random generation of numbers and choosing them with serial number.)

*/
WITH miami1 AS (
SELECT cd.full_name, 
       sm.major_asset_class, 
       sm.minor_asset_class, 
       pd.ticker, 
       sm.security_name, 
       hc.quantity, 
       pd.`date`, 
       pd.`value`
FROM account_dim AS ad
JOIN customer_details AS cd
ON  ad.client_id = cd.customer_id
JOIN holdings_current AS hc
ON ad.account_id = hc.account_id
JOIN security_masterlist AS sm
ON sm.ticker = hc.ticker
JOIN pricing_daily_new AS pd
ON pd.ticker = sm.ticker
WHERE hc.account_id IN ('25','197') 
AND pd.date BETWEEN '2020-09-09' AND '2022-09-09'
AND pd.price_type = 'Adjusted'
),


/*
Creating the temporary dataset 
where calculating the lagged price
 for 12 months, 18 months, 24 months respectively
*/
miami2 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       LAG(value, 250) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_12m,
       LAG(value, 378) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_18m,
       LAG(value, 504) OVER(PARTITION BY ticker
                            ORDER BY date) AS lagged_price_24m
FROM miami1
),

/*
Calculating returns for 12 months, 18 months,24 months
*/
miami3 AS(
SELECT full_name, 
       major_asset_class, 
       minor_asset_class,
       ticker, 
       security_name, 
       quantity, 
       `date`, 
       `value`,
       lagged_price_12m,
       lagged_price_18m,
       lagged_price_24m,
       (`value` - lagged_price_12m) / lagged_price_12m AS return_12m,
       (`value` - lagged_price_18m) / lagged_price_18m AS return_18m,
       (`value` - lagged_price_24m) / lagged_price_24m AS return_24m
FROM miami2
WHERE date = '2022-09-09'
),

/*
Making the multiple records in major assest class into one entity
and displaying the whole data
*/
miami4 AS(
SELECT miami3.full_name,miami3.ticker,
       CASE WHEN sm.major_asset_class = 'equty' THEN 'equity'
            WHEN sm.major_asset_class = 'fixed income' THEN 'fixed_income'
            WHEN sm.major_asset_class = 'fixed income corporate' THEN 'fixed_income'
            ELSE sm.major_asset_class END AS major_asset_class,
       sm.minor_asset_class,
	 miami3.security_name, 
	   AVG(ft3.return_12m) AS return_12m,
	   AVG(ft3.return_18m) AS return_18m,
       AVG(ft3.return_24m) AS return_24m
FROM miami3
JOIN security_masterlist AS sm
ON miami3.security_name = sm.security_name
WHERE return_12m IS NOT NULL
  AND return_18m IS NOT NULL
  AND return_24m IS NOT NULL
GROUP BY ticker
ORDER BY return_12m DESC , return_18m DESC, return_24m DESC
)
/*
Calculating the total returns for the clients for each security
*/

SELECT full_name,security_name,
        SUM(return_12m), 
        SUM(return_18m),
       SUM(return_24m)
FROM miami4
GROUP BY full_name,security_name
ORDER BY full_name;

-- --------------------------------------------------------------------------------------
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- ------------------------------------------------------------------------------------



-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- |||||||2. What are the correlations between your assets? Are there any interesting correlations?||||||||
-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


-- correlation between equity and commodities 
WITH 
db1 AS (SELECT major_asset_class, minor_asset_class, id, security_name, sec_type, `date`, `value`, pr.ticker, price_type, 
LAG (`value`,250) OVER (
PARTITION BY pr.ticker 
ORDER BY `date`) AS lagged_price
FROM pricing_daily_new AS pr
JOIN security_masterlist AS se
ON se.ticker = pr.ticker
WHERE pr.price_type = 'Adjusted' AND pr.`date` > '2019-09-09' ),

db2 AS (SELECT 
CASE WHEN major_asset_class = "equity" OR  major_asset_class = "equty" THEN (`value` - lagged_price) / lagged_price
ELSE 0
END AS r1, 
CASE WHEN major_asset_class = "commodities" THEN (`value` - lagged_price) / lagged_price
ELSE 0
END AS r2 
FROM db1)

SELECT ROUND((count(*) * sum(ROUND(r1, 2) * r2) - sum(ROUND(r1,2)) * sum(r2)) / 
        (sqrt(count(*) * sum(ROUND(r1, 2) * ROUND(r1,2)) - sum(ROUND(r1,2)) * sum(ROUND(r1,2))) 
        * sqrt(count(*) * sum(r2 * r2) - sum(r2) * sum(r2))), 4)
AS correlation_coefficient        
FROM db2;




-- correlation between alternatives and commodities
WITH 
db1 AS (SELECT major_asset_class, minor_asset_class, id, security_name, sec_type, date, value, pr.ticker, price_type, 
LAG (value,360) OVER (
PARTITION BY pr.ticker 
ORDER BY date) AS lagged_price
FROM pricing_daily_new AS pr
INNER JOIN security_masterlist AS se
ON se.ticker = pr.ticker
WHERE price_type = 'Adjusted' ),

db2 AS (SELECT 
CASE WHEN major_asset_class = "alternatives"  THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r1,
CASE WHEN major_asset_class = "commodities" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r2 
FROM db1)

SELECT ROUND((count(*) * sum(ROUND(r1, 2) * r2) - sum(ROUND(r1,2)) * sum(r2)) / 
        (sqrt(count(*) * sum(ROUND(r1, 2) * ROUND(r1,2)) - sum(ROUND(r1,2)) * sum(ROUND(r1,2))) * sqrt(count(*) * sum(r2 * r2) - sum(r2) * sum(r2))), 4)
AS correlation_coefficient        
FROM db2;


-- correlation between alternatives and fixed income
WITH 
db1 AS (SELECT major_asset_class, minor_asset_class, id, security_name, sec_type, date, value, pr.ticker, price_type, 
LAG (value,360) OVER (
PARTITION BY pr.ticker 
ORDER BY date) AS lagged_price
FROM pricing_daily_new AS pr
INNER JOIN security_masterlist AS se
ON se.ticker = pr.ticker
WHERE price_type = 'Adjusted' and `date` ),

db2 AS (SELECT 
CASE WHEN major_asset_class = "fixed income" OR  major_asset_class = "fixed income corporate" or major_asset_class = "fixed_income" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r1,
CASE WHEN major_asset_class = "alternatives" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r2 
FROM db1)

SELECT ROUND((count(*) * sum(ROUND(r1, 2) * r2) - sum(ROUND(r1,2)) * sum(r2)) / 
        (sqrt(count(*) * sum(ROUND(r1, 2) * ROUND(r1,2)) - sum(ROUND(r1,2)) * sum(ROUND(r1,2))) * sqrt(count(*) * sum(r2 * r2) - sum(r2) * sum(r2))), 4)
AS correlation_coefficient        
FROM db2;

-- correlation between commodities and fixed income
WITH 
db1 AS (SELECT major_asset_class, minor_asset_class, id, security_name, sec_type, date, value, pr.ticker, price_type, 
LAG (value,360) OVER (
PARTITION BY pr.ticker 
ORDER BY date) AS lagged_price
FROM pricing_daily_new AS pr
INNER JOIN security_masterlist AS se
ON se.ticker = pr.ticker
WHERE price_type = 'Adjusted'),

db2 AS (SELECT 
CASE WHEN major_asset_class = "fixed income" OR  major_asset_class = "fixed income corporate" or major_asset_class = "fixed_income" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r1,
CASE WHEN major_asset_class = "commodities" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r2 
FROM db1)

SELECT ROUND((count(*) * sum(ROUND(r1, 2) * r2) - sum(ROUND(r1,2)) * sum(r2)) / 
        (sqrt(count(*) * sum(ROUND(r1, 2) * ROUND(r1,2)) - sum(ROUND(r1,2)) * sum(ROUND(r1,2))) * sqrt(count(*) * sum(r2 * r2) - sum(r2) * sum(r2))), 4)
AS correlation_coefficient        
FROM db2;



-- correlation between equity and fixed income
WITH 
db1 AS (SELECT major_asset_class, minor_asset_class, id, security_name, sec_type, date, value, pr.ticker, price_type, 
LAG (value,360) OVER (
PARTITION BY pr.ticker 
ORDER BY date) AS lagged_price
FROM pricing_daily_new AS pr
INNER JOIN security_masterlist AS se
ON se.ticker = pr.ticker
WHERE price_type = 'Adjusted' and `date`),

db2 AS (SELECT 
CASE WHEN major_asset_class = "fixed income" OR  major_asset_class = "fixed income corporate" or major_asset_class = "fixed_income" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r1,
CASE WHEN major_asset_class = "equity" OR  major_asset_class = "equty" THEN (value - lagged_price) / lagged_price
ELSE 0
END AS r2 
FROM db1)

SELECT ROUND((count(*) * sum(ROUND(r1, 2) * r2) - sum(ROUND(r1,2)) * sum(r2)) / 
        (sqrt(count(*) * sum(ROUND(r1, 2) * ROUND(r1,2)) - sum(ROUND(r1,2)) * sum(ROUND(r1,2))) * sqrt(count(*) * sum(r2 * r2) - sum(r2) * sum(r2))), 4)
AS correlation_coefficient        
FROM db2;

-- --------------------------------------------------------------------------------------
-- |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- ------------------------------------------------------------------------------------



-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-- |||||||3. What is the most recent 12M sigma (risk) for each of the securities?||||||||
-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
SELECT ticker,major_asset_class,
AVG(returns) as mu,
STD(returns) as sigma,
AVG(returns)/(STD(returns)*sqrt(250)) as annual_risk_adj_returns
FROM
(SELECT R.`date`, R.ticker, R.`value`, R.lagged_price, R.price_type,R.major_asset_class,
(R.value - R.lagged_price)/R.lagged_price as returns
FROM ( Select cd.full_name,pd.ticker,sm.major_asset_class,pd.`value`,pd.`date`,pd.price_type, 
LAG( pd.`value`, 250) OVER ( PARTITION BY pd.ticker ORDER BY pd.`date`) as lagged_price
FROM account_dim AS ad
JOIN customer_details AS cd
ON  ad.client_id = cd.customer_id
JOIN holdings_current AS hc
ON ad.account_id = hc.account_id
JOIN security_masterlist AS sm
ON sm.ticker = hc.ticker
JOIN pricing_daily_new AS pd
ON sm.ticker = pd.ticker
WHERE hc.account_id = '25' OR  hc.account_id = '197' 
AND hc.price_type like '%Adjusted%' AND pd.date > '2019-09-09' ) as R) as profreturns
GROUP BY ticker,major_asset_class
order by annual_risk_adj_returns asc;



-
--  Based on the previous 3 questions, which holdings would you sell, which holdings would you buy?|| 
-- ||||Are there any outside securities that you would recommend adding to the portfolio?      

SELECT ticker,major_asset_class,
AVG(returns) as mu,
STD(returns) as sigma,
AVG(returns)/(STD(returns)*sqrt(250)) as annual_risk_adj_returns
FROM
(SELECT R.date, R.ticker, R.value, R.lagged_price, R.price_type,R.major_asset_class,
(R.value - R.lagged_price)/R.lagged_price as returns
FROM ( Select pd.ticker,sm.major_asset_class,pd.`value`,pd.`date`,pd.price_type, LAG( value, 1) 
OVER ( PARTITION BY ticker ORDER BY date) as lagged_price
FROM pricing_daily_new as pd
JOIN security_masterlist as sm
on pd.ticker=sm.ticker
WHERE pd.price_type='Adjusted' AND pd.date > '2019-09-09' ) as R) as profreturns
GROUP BY ticker,major_asset_class
order by annual_risk_adj_returns desc;
